# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# rTorrent log file locations
execute = {/bin/bash,-c,mkdir -p /config/rtorrent/logs}
log.open_file = "rtorrent", /config/rtorrent/logs/rtorrent.log
log.open_file = "tracker", /config/rtorrent/logs/tracker.log
log.open_file = "storage", /config/rtorrent/logs/storage.log

# rTorrent logging verbosity for rtorrent, comment out if logs are too chatty
log.add_output = "info", "rtorrent"
log.add_output = "critical", "rtorrent"
log.add_output = "error", "rtorrent"
log.add_output = "warn", "rtorrent"
log.add_output = "notice", "rtorrent"
log.add_output = "debug", "rtorrent"

# rTorrent logging for dht and tracker traffic
log.add_output = "dht_debug", "tracker"
log.add_output = "tracker_debug", "tracker"
  
# rTorrent logging for storage
log.add_output = "storage_debug", "storage"

# Maximum number of simultaneous downloads and uploads slots (global slots!) (`max_downloads_global`, `max_uploads_global`)
#
#throttle.max_downloads.global.set = 300
#throttle.max_uploads.global.set   = 300

# Global upload and download rate in KiB. "0" for unlimited.
#
#throttle.global_down.max_rate.set_kb = 0
#throttle.global_up.max_rate.set_kb = 0

# Maximum number of simultaneous downloads and uploads slots per torrent (`max_uploads`) Default: `50` for both
#
#throttle.max_downloads.set = 50
#throttle.max_uploads.set = 8

# Maximum and minimum number of peers to connect to per torrent.
#
#throttle.min_peers.normal.set = 100
#throttle.max_peers.normal.set = 200

# Same as above but for seeding completed torrents (-1 = same as downloading)
#
#throttle.min_peers.seed.set = 10
#throttle.max_peers.seed.set = 50

# Maximum number of connections rtorrent can accept/make (`sockets`)
#
#network.max_open_sockets.set = 1200

# Maximum number of open files rtorrent can keep open (you have to modify the system wide settings with ulimit!) (`set_max_open_files`)
#
#network.max_open_files.set = 600

# Default directory to save the downloaded torrents.
#
execute = {/bin/bash,-c,mkdir -p /data/incomplete}
directory.default.set = /data/incomplete/

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
#
execute = {/bin/bash,-c,mkdir -p /config/rtorrent/session}
session.path.set = /config/rtorrent/session/

# Watch a directory for new torrents, and stop those that have been
# deleted.
#
#schedule2 = watch_directory,5,5,load.start=./watch/*.torrent
#schedule2 = untied_directory,5,5,stop_untied=

# Close torrents when diskspace is low.
#
#schedule2 = low_diskspace,5,60,close_low_diskspace=100M

# The ip address reported to the tracker.
#
#network.local_address.set = 127.0.0.1
#network.local_address.set = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#
#network.bind_address.set = 127.0.0.1
#network.bind_address.set = rakshasa.no

# Port range to use for listening.
#
#network.port_range.set = 49160-49160

# Start opening ports at a random position within the port range.
#
network.port_random.set = no

# Disable check for SSL cert for tracker
#
network.http.ssl_verify_peer.set = 0

# Check hash for finished torrents. Might be useful until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#
#pieces.hash.on_completion.set = no

# Set whether the client should try to connect to UDP trackers.
#
trackers.use_udp.set = yes

# Set the maximum permitted single file size in a torrent.
# Note if you do not set this and attempt to start a torrent that
# contains a file larger than 512 GB (default) then the torrent will
# not start.
#
#system.file.max_size.set = 1024G

# Alternative calls to bind and ip that should handle dynamic ip's.
#
#schedule2 = ip_tick,0,1800,ip=rakshasa
#schedule2 = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# allow_incoming - Allow incoming encrypted connections from other peers
# try_outgoing - Attempt to set up encryption when initiating a connection
# require - Require encryption, and reject to peers who don't support it
# require_RC4 - Require RC4 encryption specifically
# enable_retry - If a peer is rejected for not supporting the encryption we need, retry the handshake
# prefer_plaintext - Prefer plaintext encryption
#
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
dht.mode.set = auto

# UDP port to use for DHT. 
#
#dht.port.set = 49170

# Enable peer exchange (for torrents not marked private)
#
protocol.pex.set = yes

# Set downlad list layout style. ("full", "compact")
#
#ui.torrent_list.layout.set = "full"

# SCGI Connectivity (for alternative rtorrent interfaces, XMLRPC)
#
# Use a IP socket with scgi_port, or a Unix socket with scgi_local.
# schedule can be used to set permissions on the unix socket.
#
#scgi_port = 0.0.0.0:5000
scgi_local = /tmp/rpc.socket
schedule = scgi_permission,0,0,"execute.nothrow=chmod,\"g+w,o=\",/tmp/rpc.socket"

# Initialise ruTorrent plugins (required for rss and scheduler plugins) on startup 
# (normally triggered by a browser opening the web ui).
#
# The command below in practice does NOT always trigger (possible race condition?) and thus
# the same command has been added to the script /home/nobody/initplugins.sh in order to 
# attempt to ensure all plugins are initialised.
#
# NOTE - Do not double quote or curly brackets env var for 'WEBUI_USER'
#
execute = {/bin/bash,-c,/usr/bin/sleep 10s && /usr/bin/php /usr/share/webapps/rutorrent/php/initplugins.php $WEBUI_USER &}
